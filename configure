#!/bin/bash

# Configure script for RestDaemon - Linux/macOS

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Default values
BUILD_DIR="build"
BUILD_TYPE="Release"
INSTALL_PREFIX="/usr/local"
GENERATOR=""

# Print usage
usage() {
    echo "Usage: ./configure [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --prefix=DIR          Installation prefix (default: /usr/local)"
    echo "  --build-dir=DIR       Build directory (default: build)"
    echo "  --debug               Build with debug symbols"
    echo "  --release             Build with optimizations (default)"
    echo "  --generator=GEN       CMake generator (default: auto-detect)"
    echo "  --help                Show this help message"
    echo ""
    echo "Examples:"
    echo "  ./configure --prefix=/opt/restdaemon"
    echo "  ./configure --debug --build-dir=debug_build"
    echo "  ./configure --generator=Ninja"
    exit 0
}

# Parse arguments
for arg in "$@"; do
    case $arg in
        --prefix=*)
            INSTALL_PREFIX="${arg#*=}"
            ;;
        --build-dir=*)
            BUILD_DIR="${arg#*=}"
            ;;
        --debug)
            BUILD_TYPE="Debug"
            ;;
        --release)
            BUILD_TYPE="Release"
            ;;
        --generator=*)
            GENERATOR="${arg#*=}"
            ;;
        --help)
            usage
            ;;
        *)
            echo -e "${RED}Unknown option: $arg${NC}"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Detect platform
echo -e "${GREEN}Detecting platform...${NC}"
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    PLATFORM="Linux"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    PLATFORM="macOS"
else
    echo -e "${RED}Unsupported platform: $OSTYPE${NC}"
    exit 1
fi
echo "Platform: $PLATFORM"

# Check for CMake
echo -e "${GREEN}Checking for CMake...${NC}"
if ! command -v cmake &> /dev/null; then
    echo -e "${RED}CMake not found. Please install CMake 3.10 or later.${NC}"
    exit 1
fi
CMAKE_VERSION=$(cmake --version | head -n1 | cut -d' ' -f3)
echo "CMake version: $CMAKE_VERSION"

# Check for compiler
echo -e "${GREEN}Checking for C++ compiler...${NC}"
if command -v g++ &> /dev/null; then
    CXX_COMPILER="g++"
    CXX_VERSION=$(g++ --version | head -n1)
elif command -v clang++ &> /dev/null; then
    CXX_COMPILER="clang++"
    CXX_VERSION=$(clang++ --version | head -n1)
else
    echo -e "${RED}No C++ compiler found. Please install g++ or clang++.${NC}"
    exit 1
fi
echo "C++ Compiler: $CXX_VERSION"

# Check for OpenSSL
echo -e "${GREEN}Checking for OpenSSL...${NC}"
OPENSSL_FOUND=0
OPENSSL_INCLUDE=""
OPENSSL_LIB=""

if command -v pkg-config &> /dev/null && pkg-config --exists openssl; then
    OPENSSL_FOUND=1
    OPENSSL_VERSION=$(pkg-config --modversion openssl)
    OPENSSL_INCLUDE=$(pkg-config --cflags-only-I openssl)
    OPENSSL_LIB=$(pkg-config --libs openssl)
    echo "OpenSSL version: $OPENSSL_VERSION (via pkg-config)"
elif [[ "$PLATFORM" == "macOS" ]]; then
    # Check Homebrew locations
    if [ -d "/opt/homebrew/opt/openssl@3" ]; then
        OPENSSL_FOUND=1
        OPENSSL_ROOT="/opt/homebrew/opt/openssl@3"
        echo "OpenSSL found: $OPENSSL_ROOT (Homebrew ARM)"
    elif [ -d "/usr/local/opt/openssl@3" ]; then
        OPENSSL_FOUND=1
        OPENSSL_ROOT="/usr/local/opt/openssl@3"
        echo "OpenSSL found: $OPENSSL_ROOT (Homebrew Intel)"
    elif [ -d "/opt/homebrew/opt/openssl@1.1" ]; then
        OPENSSL_FOUND=1
        OPENSSL_ROOT="/opt/homebrew/opt/openssl@1.1"
        echo "OpenSSL found: $OPENSSL_ROOT (Homebrew ARM)"
    elif [ -d "/usr/local/opt/openssl@1.1" ]; then
        OPENSSL_FOUND=1
        OPENSSL_ROOT="/usr/local/opt/openssl@1.1"
        echo "OpenSSL found: $OPENSSL_ROOT (Homebrew Intel)"
    fi
elif [[ "$PLATFORM" == "Linux" ]]; then
    # Check standard Linux locations
    if [ -f "/usr/include/openssl/ssl.h" ]; then
        OPENSSL_FOUND=1
        echo "OpenSSL found in system directories"
    fi
fi

if [ $OPENSSL_FOUND -eq 0 ]; then
    echo -e "${YELLOW}Warning: OpenSSL not found. Install with:${NC}"
    if [[ "$PLATFORM" == "macOS" ]]; then
        echo "  brew install openssl@3"
    else
        echo "  sudo apt-get install libssl-dev  (Debian/Ubuntu)"
        echo "  sudo yum install openssl-devel   (RedHat/CentOS)"
    fi
fi

# Auto-detect generator if not specified
if [ -z "$GENERATOR" ]; then
    if command -v ninja &> /dev/null; then
        GENERATOR="Ninja"
        echo "Using Ninja build system"
    else
        GENERATOR="Unix Makefiles"
        echo "Using Make build system"
    fi
fi

# Create build directory
echo -e "${GREEN}Creating build directory: $BUILD_DIR${NC}"
mkdir -p "$BUILD_DIR"

# Run CMake
echo -e "${GREEN}Running CMake configuration...${NC}"
cd "$BUILD_DIR"

CMAKE_ARGS=(
    -DCMAKE_BUILD_TYPE="$BUILD_TYPE"
    -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX"
    -G "$GENERATOR"
)

# Add OpenSSL path if found
if [ $OPENSSL_FOUND -eq 1 ] && [ ! -z "$OPENSSL_ROOT" ]; then
    CMAKE_ARGS+=(-DOPENSSL_ROOT_DIR="$OPENSSL_ROOT")
fi

cmake .. "${CMAKE_ARGS[@]}"

cd ..

# Print summary
echo ""
echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}Configuration Summary${NC}"
echo -e "${GREEN}========================================${NC}"
echo "Platform:         $PLATFORM"
echo "Build Type:       $BUILD_TYPE"
echo "Build Directory:  $BUILD_DIR"
echo "Install Prefix:   $INSTALL_PREFIX"
echo "Generator:        $GENERATOR"
echo "Compiler:         $CXX_COMPILER"
if [ $OPENSSL_FOUND -eq 1 ]; then
    if [ ! -z "$OPENSSL_ROOT" ]; then
        echo "OpenSSL:          $OPENSSL_ROOT"
    else
        echo "OpenSSL:          System"
    fi
else
    echo -e "OpenSSL:          ${YELLOW}Not found${NC}"
fi
echo ""
echo -e "${GREEN}Configuration complete!${NC}"
echo ""
echo "Next steps:"
echo "  1. Build:   cd $BUILD_DIR && make"
echo "  2. Test:    ./$BUILD_DIR/rest_daemon"
echo "  3. Install: cd $BUILD_DIR && sudo make install"
echo ""
